syntax = "proto3";
package proto;

// All information about a block that is relevant to consensus
message ConsensusBlock {
    bytes block_id = 1;
    bytes previous_id = 2;
    // The id of peer that signed this block
    bytes signer_id = 3;
    uint64 block_num = 4;
    bytes payload = 5;
    // A summary of the contents of the block
    bytes summary = 6;
}

// Information about a peer that is relevant to consensus
message ConsensusPeerInfo {
    // The unique id for this peer. This can be correlated with the signer id
    // on consensus blocks.
    bytes peer_id = 1;
}

// A new block was received and passed initial consensus validation
message ConsensusNotifyBlockNew {
    ConsensusBlock block = 1;
}

// This block can be committed successfully
message ConsensusNotifyBlockValid {
    bytes block_id = 1;
}

// This block cannot be committed successfully
message ConsensusNotifyBlockInvalid {
    bytes block_id = 1;
}

// This block has been committed
message ConsensusNotifyBlockCommit {
    bytes block_id = 1;
}

// The engine has been activated
message ConsensusNotifyEngineActivated {
    // Startup Info
    ConsensusBlock chain_head = 1;
    repeated ConsensusPeerInfo peers = 2;
    ConsensusPeerInfo local_peer_info = 3;
}

// The engine has been deactivated
message ConsensusNotifyEngineDeactivated {}

// Confirm that the notification was received. The validator message
// correlation id is used to determine which notification this is an ack for.
message ConsensusNotifyAck {}


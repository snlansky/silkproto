// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `consensus.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct BroadcastResponse {
    // message fields
    pub status: super::common::Status,
    pub info: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BroadcastResponse {
    fn default() -> &'a BroadcastResponse {
        <BroadcastResponse as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastResponse {
    pub fn new() -> BroadcastResponse {
        ::std::default::Default::default()
    }

    // .proto.Status status = 1;


    pub fn get_status(&self) -> super::common::Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = super::common::Status::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::common::Status) {
        self.status = v;
    }

    // string info = 2;


    pub fn get_info(&self) -> &str {
        &self.info
    }
    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: ::std::string::String) {
        self.info = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut ::std::string::String {
        &mut self.info
    }

    // Take field
    pub fn take_info(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.info, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BroadcastResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.status = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != super::common::Status::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.info.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.info);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != super::common::Status::UNKNOWN {
            os.write_enum(1, self.status.value())?;
        }
        if !self.info.is_empty() {
            os.write_string(2, &self.info)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BroadcastResponse {
        BroadcastResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::Status>>(
                    "status",
                    |m: &BroadcastResponse| { &m.status },
                    |m: &mut BroadcastResponse| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "info",
                    |m: &BroadcastResponse| { &m.info },
                    |m: &mut BroadcastResponse| { &mut m.info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BroadcastResponse>(
                    "BroadcastResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BroadcastResponse {
        static mut instance: ::protobuf::lazy::Lazy<BroadcastResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BroadcastResponse,
        };
        unsafe {
            instance.get(BroadcastResponse::new)
        }
    }
}

impl ::protobuf::Clear for BroadcastResponse {
    fn clear(&mut self) {
        self.status = super::common::Status::UNKNOWN;
        self.info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BroadcastResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeliverResponse {
    // message oneof groups
    pub Type: ::std::option::Option<DeliverResponse_oneof_Type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeliverResponse {
    fn default() -> &'a DeliverResponse {
        <DeliverResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum DeliverResponse_oneof_Type {
    status(super::common::Status),
    block(super::block::Block),
}

impl DeliverResponse {
    pub fn new() -> DeliverResponse {
        ::std::default::Default::default()
    }

    // .proto.Status status = 1;


    pub fn get_status(&self) -> super::common::Status {
        match self.Type {
            ::std::option::Option::Some(DeliverResponse_oneof_Type::status(v)) => v,
            _ => super::common::Status::UNKNOWN,
        }
    }
    pub fn clear_status(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(DeliverResponse_oneof_Type::status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::common::Status) {
        self.Type = ::std::option::Option::Some(DeliverResponse_oneof_Type::status(v))
    }

    // .proto.Block block = 2;


    pub fn get_block(&self) -> &super::block::Block {
        match self.Type {
            ::std::option::Option::Some(DeliverResponse_oneof_Type::block(ref v)) => v,
            _ => super::block::Block::default_instance(),
        }
    }
    pub fn clear_block(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_block(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(DeliverResponse_oneof_Type::block(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::block::Block) {
        self.Type = ::std::option::Option::Some(DeliverResponse_oneof_Type::block(v))
    }

    // Mutable pointer to the field.
    pub fn mut_block(&mut self) -> &mut super::block::Block {
        if let ::std::option::Option::Some(DeliverResponse_oneof_Type::block(_)) = self.Type {
        } else {
            self.Type = ::std::option::Option::Some(DeliverResponse_oneof_Type::block(super::block::Block::new()));
        }
        match self.Type {
            ::std::option::Option::Some(DeliverResponse_oneof_Type::block(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_block(&mut self) -> super::block::Block {
        if self.has_block() {
            match self.Type.take() {
                ::std::option::Option::Some(DeliverResponse_oneof_Type::block(v)) => v,
                _ => panic!(),
            }
        } else {
            super::block::Block::new()
        }
    }
}

impl ::protobuf::Message for DeliverResponse {
    fn is_initialized(&self) -> bool {
        if let Some(DeliverResponse_oneof_Type::block(ref v)) = self.Type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(DeliverResponse_oneof_Type::status(is.read_enum()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(DeliverResponse_oneof_Type::block(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.Type {
            match v {
                &DeliverResponse_oneof_Type::status(v) => {
                    my_size += ::protobuf::rt::enum_size(1, v);
                },
                &DeliverResponse_oneof_Type::block(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.Type {
            match v {
                &DeliverResponse_oneof_Type::status(v) => {
                    os.write_enum(1, v.value())?;
                },
                &DeliverResponse_oneof_Type::block(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeliverResponse {
        DeliverResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, super::common::Status>(
                    "status",
                    DeliverResponse::has_status,
                    DeliverResponse::get_status,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::block::Block>(
                    "block",
                    DeliverResponse::has_block,
                    DeliverResponse::get_block,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeliverResponse>(
                    "DeliverResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeliverResponse {
        static mut instance: ::protobuf::lazy::Lazy<DeliverResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeliverResponse,
        };
        unsafe {
            instance.get(DeliverResponse::new)
        }
    }
}

impl ::protobuf::Clear for DeliverResponse {
    fn clear(&mut self) {
        self.Type = ::std::option::Option::None;
        self.Type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeliverResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeliverResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusMessage {
    // message oneof groups
    pub Type: ::std::option::Option<ConsensusMessage_oneof_Type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusMessage {
    fn default() -> &'a ConsensusMessage {
        <ConsensusMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ConsensusMessage_oneof_Type {
    data(::std::vec::Vec<u8>),
    config_change(super::eraftpb::ConfChange),
    raft_message(super::eraftpb::Message),
}

impl ConsensusMessage {
    pub fn new() -> ConsensusMessage {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        match self.Type {
            ::std::option::Option::Some(ConsensusMessage_oneof_Type::data(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_data(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(ConsensusMessage_oneof_Type::data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.Type = ::std::option::Option::Some(ConsensusMessage_oneof_Type::data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(ConsensusMessage_oneof_Type::data(_)) = self.Type {
        } else {
            self.Type = ::std::option::Option::Some(ConsensusMessage_oneof_Type::data(::std::vec::Vec::new()));
        }
        match self.Type {
            ::std::option::Option::Some(ConsensusMessage_oneof_Type::data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_data() {
            match self.Type.take() {
                ::std::option::Option::Some(ConsensusMessage_oneof_Type::data(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .eraftpb.ConfChange config_change = 2;


    pub fn get_config_change(&self) -> &super::eraftpb::ConfChange {
        match self.Type {
            ::std::option::Option::Some(ConsensusMessage_oneof_Type::config_change(ref v)) => v,
            _ => super::eraftpb::ConfChange::default_instance(),
        }
    }
    pub fn clear_config_change(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_config_change(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(ConsensusMessage_oneof_Type::config_change(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_config_change(&mut self, v: super::eraftpb::ConfChange) {
        self.Type = ::std::option::Option::Some(ConsensusMessage_oneof_Type::config_change(v))
    }

    // Mutable pointer to the field.
    pub fn mut_config_change(&mut self) -> &mut super::eraftpb::ConfChange {
        if let ::std::option::Option::Some(ConsensusMessage_oneof_Type::config_change(_)) = self.Type {
        } else {
            self.Type = ::std::option::Option::Some(ConsensusMessage_oneof_Type::config_change(super::eraftpb::ConfChange::new()));
        }
        match self.Type {
            ::std::option::Option::Some(ConsensusMessage_oneof_Type::config_change(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_config_change(&mut self) -> super::eraftpb::ConfChange {
        if self.has_config_change() {
            match self.Type.take() {
                ::std::option::Option::Some(ConsensusMessage_oneof_Type::config_change(v)) => v,
                _ => panic!(),
            }
        } else {
            super::eraftpb::ConfChange::new()
        }
    }

    // .eraftpb.Message raft_message = 3;


    pub fn get_raft_message(&self) -> &super::eraftpb::Message {
        match self.Type {
            ::std::option::Option::Some(ConsensusMessage_oneof_Type::raft_message(ref v)) => v,
            _ => super::eraftpb::Message::default_instance(),
        }
    }
    pub fn clear_raft_message(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_raft_message(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(ConsensusMessage_oneof_Type::raft_message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raft_message(&mut self, v: super::eraftpb::Message) {
        self.Type = ::std::option::Option::Some(ConsensusMessage_oneof_Type::raft_message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raft_message(&mut self) -> &mut super::eraftpb::Message {
        if let ::std::option::Option::Some(ConsensusMessage_oneof_Type::raft_message(_)) = self.Type {
        } else {
            self.Type = ::std::option::Option::Some(ConsensusMessage_oneof_Type::raft_message(super::eraftpb::Message::new()));
        }
        match self.Type {
            ::std::option::Option::Some(ConsensusMessage_oneof_Type::raft_message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raft_message(&mut self) -> super::eraftpb::Message {
        if self.has_raft_message() {
            match self.Type.take() {
                ::std::option::Option::Some(ConsensusMessage_oneof_Type::raft_message(v)) => v,
                _ => panic!(),
            }
        } else {
            super::eraftpb::Message::new()
        }
    }
}

impl ::protobuf::Message for ConsensusMessage {
    fn is_initialized(&self) -> bool {
        if let Some(ConsensusMessage_oneof_Type::config_change(ref v)) = self.Type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ConsensusMessage_oneof_Type::raft_message(ref v)) = self.Type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(ConsensusMessage_oneof_Type::data(is.read_bytes()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(ConsensusMessage_oneof_Type::config_change(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(ConsensusMessage_oneof_Type::raft_message(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.Type {
            match v {
                &ConsensusMessage_oneof_Type::data(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &ConsensusMessage_oneof_Type::config_change(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ConsensusMessage_oneof_Type::raft_message(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.Type {
            match v {
                &ConsensusMessage_oneof_Type::data(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &ConsensusMessage_oneof_Type::config_change(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ConsensusMessage_oneof_Type::raft_message(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusMessage {
        ConsensusMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "data",
                    ConsensusMessage::has_data,
                    ConsensusMessage::get_data,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::eraftpb::ConfChange>(
                    "config_change",
                    ConsensusMessage::has_config_change,
                    ConsensusMessage::get_config_change,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::eraftpb::Message>(
                    "raft_message",
                    ConsensusMessage::has_raft_message,
                    ConsensusMessage::get_raft_message,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusMessage>(
                    "ConsensusMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusMessage {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusMessage,
        };
        unsafe {
            instance.get(ConsensusMessage::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusMessage {
    fn clear(&mut self) {
        self.Type = ::std::option::Option::None;
        self.Type = ::std::option::Option::None;
        self.Type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fconsensus.proto\x12\x05proto\x1a\x0ccommon.proto\x1a\x0bblock.prot\
    o\x1a\reraftpb.proto\"N\n\x11BroadcastResponse\x12%\n\x06status\x18\x01\
    \x20\x01(\x0e2\r.proto.StatusR\x06status\x12\x12\n\x04info\x18\x02\x20\
    \x01(\tR\x04info\"h\n\x0fDeliverResponse\x12'\n\x06status\x18\x01\x20\
    \x01(\x0e2\r.proto.StatusH\0R\x06status\x12$\n\x05block\x18\x02\x20\x01(\
    \x0b2\x0c.proto.BlockH\0R\x05blockB\x06\n\x04Type\"\xa3\x01\n\x10Consens\
    usMessage\x12\x14\n\x04data\x18\x01\x20\x01(\x0cH\0R\x04data\x12:\n\rcon\
    fig_change\x18\x02\x20\x01(\x0b2\x13.eraftpb.ConfChangeH\0R\x0cconfigCha\
    nge\x125\n\x0craft_message\x18\x03\x20\x01(\x0b2\x10.eraftpb.MessageH\0R\
    \x0braftMessageB\x06\n\x04Type2\x82\x01\n\x0fAtomicBroadcast\x125\n\tBro\
    adcast\x12\x0c.proto.Block\x1a\x18.proto.BroadcastResponse\"\0\x128\n\
    \x07Deliver\x12\x0f.proto.Envelope\x1a\x16.proto.DeliverResponse\"\0(\
    \x010\x012?\n\tConsensus\x122\n\x08Exchange\x12\x0f.proto.Envelope\x1a\
    \x0f.proto.Envelope\"\0(\x010\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}

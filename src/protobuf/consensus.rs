// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `consensus.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusBlock {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    pub previous_id: ::std::vec::Vec<u8>,
    pub signer_id: ::std::vec::Vec<u8>,
    pub block_num: u64,
    pub payload: ::std::vec::Vec<u8>,
    pub summary: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusBlock {
    fn default() -> &'a ConsensusBlock {
        <ConsensusBlock as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusBlock {
    pub fn new() -> ConsensusBlock {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }

    // bytes previous_id = 2;


    pub fn get_previous_id(&self) -> &[u8] {
        &self.previous_id
    }
    pub fn clear_previous_id(&mut self) {
        self.previous_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.previous_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.previous_id
    }

    // Take field
    pub fn take_previous_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.previous_id, ::std::vec::Vec::new())
    }

    // bytes signer_id = 3;


    pub fn get_signer_id(&self) -> &[u8] {
        &self.signer_id
    }
    pub fn clear_signer_id(&mut self) {
        self.signer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signer_id
    }

    // Take field
    pub fn take_signer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signer_id, ::std::vec::Vec::new())
    }

    // uint64 block_num = 4;


    pub fn get_block_num(&self) -> u64 {
        self.block_num
    }
    pub fn clear_block_num(&mut self) {
        self.block_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_num(&mut self, v: u64) {
        self.block_num = v;
    }

    // bytes payload = 5;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // bytes summary = 6;


    pub fn get_summary(&self) -> &[u8] {
        &self.summary
    }
    pub fn clear_summary(&mut self) {
        self.summary.clear();
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: ::std::vec::Vec<u8>) {
        self.summary = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_summary(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.summary
    }

    // Take field
    pub fn take_summary(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.summary, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusBlock {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.previous_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signer_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_num = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.summary)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        if !self.previous_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.previous_id);
        }
        if !self.signer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signer_id);
        }
        if self.block_num != 0 {
            my_size += ::protobuf::rt::value_size(4, self.block_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.payload);
        }
        if !self.summary.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.summary);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        if !self.previous_id.is_empty() {
            os.write_bytes(2, &self.previous_id)?;
        }
        if !self.signer_id.is_empty() {
            os.write_bytes(3, &self.signer_id)?;
        }
        if self.block_num != 0 {
            os.write_uint64(4, self.block_num)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(5, &self.payload)?;
        }
        if !self.summary.is_empty() {
            os.write_bytes(6, &self.summary)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusBlock {
        ConsensusBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "block_id",
                    |m: &ConsensusBlock| { &m.block_id },
                    |m: &mut ConsensusBlock| { &mut m.block_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "previous_id",
                    |m: &ConsensusBlock| { &m.previous_id },
                    |m: &mut ConsensusBlock| { &mut m.previous_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signer_id",
                    |m: &ConsensusBlock| { &m.signer_id },
                    |m: &mut ConsensusBlock| { &mut m.signer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "block_num",
                    |m: &ConsensusBlock| { &m.block_num },
                    |m: &mut ConsensusBlock| { &mut m.block_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &ConsensusBlock| { &m.payload },
                    |m: &mut ConsensusBlock| { &mut m.payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "summary",
                    |m: &ConsensusBlock| { &m.summary },
                    |m: &mut ConsensusBlock| { &mut m.summary },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusBlock>(
                    "ConsensusBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusBlock {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusBlock,
        };
        unsafe {
            instance.get(ConsensusBlock::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusBlock {
    fn clear(&mut self) {
        self.block_id.clear();
        self.previous_id.clear();
        self.signer_id.clear();
        self.block_num = 0;
        self.payload.clear();
        self.summary.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusPeerInfo {
    // message fields
    pub peer_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusPeerInfo {
    fn default() -> &'a ConsensusPeerInfo {
        <ConsensusPeerInfo as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusPeerInfo {
    pub fn new() -> ConsensusPeerInfo {
        ::std::default::Default::default()
    }

    // bytes peer_id = 1;


    pub fn get_peer_id(&self) -> &[u8] {
        &self.peer_id
    }
    pub fn clear_peer_id(&mut self) {
        self.peer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.peer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.peer_id
    }

    // Take field
    pub fn take_peer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.peer_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusPeerInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.peer_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.peer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.peer_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.peer_id.is_empty() {
            os.write_bytes(1, &self.peer_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusPeerInfo {
        ConsensusPeerInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "peer_id",
                    |m: &ConsensusPeerInfo| { &m.peer_id },
                    |m: &mut ConsensusPeerInfo| { &mut m.peer_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusPeerInfo>(
                    "ConsensusPeerInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusPeerInfo {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusPeerInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusPeerInfo,
        };
        unsafe {
            instance.get(ConsensusPeerInfo::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusPeerInfo {
    fn clear(&mut self) {
        self.peer_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusPeerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusPeerInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyBlockNew {
    // message fields
    pub block: ::protobuf::SingularPtrField<ConsensusBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyBlockNew {
    fn default() -> &'a ConsensusNotifyBlockNew {
        <ConsensusNotifyBlockNew as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyBlockNew {
    pub fn new() -> ConsensusNotifyBlockNew {
        ::std::default::Default::default()
    }

    // .proto.ConsensusBlock block = 1;


    pub fn get_block(&self) -> &ConsensusBlock {
        self.block.as_ref().unwrap_or_else(|| ConsensusBlock::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: ConsensusBlock) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut ConsensusBlock {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> ConsensusBlock {
        self.block.take().unwrap_or_else(|| ConsensusBlock::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyBlockNew {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyBlockNew {
        ConsensusNotifyBlockNew::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusBlock>>(
                    "block",
                    |m: &ConsensusNotifyBlockNew| { &m.block },
                    |m: &mut ConsensusNotifyBlockNew| { &mut m.block },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusNotifyBlockNew>(
                    "ConsensusNotifyBlockNew",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusNotifyBlockNew {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusNotifyBlockNew> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusNotifyBlockNew,
        };
        unsafe {
            instance.get(ConsensusNotifyBlockNew::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusNotifyBlockNew {
    fn clear(&mut self) {
        self.block.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyBlockNew {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyBlockNew {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyBlockValid {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyBlockValid {
    fn default() -> &'a ConsensusNotifyBlockValid {
        <ConsensusNotifyBlockValid as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyBlockValid {
    pub fn new() -> ConsensusNotifyBlockValid {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyBlockValid {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyBlockValid {
        ConsensusNotifyBlockValid::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "block_id",
                    |m: &ConsensusNotifyBlockValid| { &m.block_id },
                    |m: &mut ConsensusNotifyBlockValid| { &mut m.block_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusNotifyBlockValid>(
                    "ConsensusNotifyBlockValid",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusNotifyBlockValid {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusNotifyBlockValid> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusNotifyBlockValid,
        };
        unsafe {
            instance.get(ConsensusNotifyBlockValid::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusNotifyBlockValid {
    fn clear(&mut self) {
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyBlockValid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyBlockValid {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyBlockInvalid {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyBlockInvalid {
    fn default() -> &'a ConsensusNotifyBlockInvalid {
        <ConsensusNotifyBlockInvalid as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyBlockInvalid {
    pub fn new() -> ConsensusNotifyBlockInvalid {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyBlockInvalid {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyBlockInvalid {
        ConsensusNotifyBlockInvalid::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "block_id",
                    |m: &ConsensusNotifyBlockInvalid| { &m.block_id },
                    |m: &mut ConsensusNotifyBlockInvalid| { &mut m.block_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusNotifyBlockInvalid>(
                    "ConsensusNotifyBlockInvalid",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusNotifyBlockInvalid {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusNotifyBlockInvalid> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusNotifyBlockInvalid,
        };
        unsafe {
            instance.get(ConsensusNotifyBlockInvalid::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusNotifyBlockInvalid {
    fn clear(&mut self) {
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyBlockInvalid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyBlockInvalid {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyBlockCommit {
    // message fields
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyBlockCommit {
    fn default() -> &'a ConsensusNotifyBlockCommit {
        <ConsensusNotifyBlockCommit as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyBlockCommit {
    pub fn new() -> ConsensusNotifyBlockCommit {
        ::std::default::Default::default()
    }

    // bytes block_id = 1;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyBlockCommit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_bytes(1, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyBlockCommit {
        ConsensusNotifyBlockCommit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "block_id",
                    |m: &ConsensusNotifyBlockCommit| { &m.block_id },
                    |m: &mut ConsensusNotifyBlockCommit| { &mut m.block_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusNotifyBlockCommit>(
                    "ConsensusNotifyBlockCommit",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusNotifyBlockCommit {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusNotifyBlockCommit> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusNotifyBlockCommit,
        };
        unsafe {
            instance.get(ConsensusNotifyBlockCommit::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusNotifyBlockCommit {
    fn clear(&mut self) {
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyBlockCommit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyBlockCommit {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyEngineActivated {
    // message fields
    pub chain_head: ::protobuf::SingularPtrField<ConsensusBlock>,
    pub peers: ::protobuf::RepeatedField<ConsensusPeerInfo>,
    pub local_peer_info: ::protobuf::SingularPtrField<ConsensusPeerInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyEngineActivated {
    fn default() -> &'a ConsensusNotifyEngineActivated {
        <ConsensusNotifyEngineActivated as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyEngineActivated {
    pub fn new() -> ConsensusNotifyEngineActivated {
        ::std::default::Default::default()
    }

    // .proto.ConsensusBlock chain_head = 1;


    pub fn get_chain_head(&self) -> &ConsensusBlock {
        self.chain_head.as_ref().unwrap_or_else(|| ConsensusBlock::default_instance())
    }
    pub fn clear_chain_head(&mut self) {
        self.chain_head.clear();
    }

    pub fn has_chain_head(&self) -> bool {
        self.chain_head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_head(&mut self, v: ConsensusBlock) {
        self.chain_head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_head(&mut self) -> &mut ConsensusBlock {
        if self.chain_head.is_none() {
            self.chain_head.set_default();
        }
        self.chain_head.as_mut().unwrap()
    }

    // Take field
    pub fn take_chain_head(&mut self) -> ConsensusBlock {
        self.chain_head.take().unwrap_or_else(|| ConsensusBlock::new())
    }

    // repeated .proto.ConsensusPeerInfo peers = 2;


    pub fn get_peers(&self) -> &[ConsensusPeerInfo] {
        &self.peers
    }
    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<ConsensusPeerInfo>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<ConsensusPeerInfo> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<ConsensusPeerInfo> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }

    // .proto.ConsensusPeerInfo local_peer_info = 3;


    pub fn get_local_peer_info(&self) -> &ConsensusPeerInfo {
        self.local_peer_info.as_ref().unwrap_or_else(|| ConsensusPeerInfo::default_instance())
    }
    pub fn clear_local_peer_info(&mut self) {
        self.local_peer_info.clear();
    }

    pub fn has_local_peer_info(&self) -> bool {
        self.local_peer_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local_peer_info(&mut self, v: ConsensusPeerInfo) {
        self.local_peer_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_peer_info(&mut self) -> &mut ConsensusPeerInfo {
        if self.local_peer_info.is_none() {
            self.local_peer_info.set_default();
        }
        self.local_peer_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_local_peer_info(&mut self) -> ConsensusPeerInfo {
        self.local_peer_info.take().unwrap_or_else(|| ConsensusPeerInfo::new())
    }
}

impl ::protobuf::Message for ConsensusNotifyEngineActivated {
    fn is_initialized(&self) -> bool {
        for v in &self.chain_head {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.peers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.local_peer_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chain_head)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.local_peer_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.chain_head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.peers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.local_peer_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.chain_head.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.peers {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.local_peer_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyEngineActivated {
        ConsensusNotifyEngineActivated::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusBlock>>(
                    "chain_head",
                    |m: &ConsensusNotifyEngineActivated| { &m.chain_head },
                    |m: &mut ConsensusNotifyEngineActivated| { &mut m.chain_head },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusPeerInfo>>(
                    "peers",
                    |m: &ConsensusNotifyEngineActivated| { &m.peers },
                    |m: &mut ConsensusNotifyEngineActivated| { &mut m.peers },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusPeerInfo>>(
                    "local_peer_info",
                    |m: &ConsensusNotifyEngineActivated| { &m.local_peer_info },
                    |m: &mut ConsensusNotifyEngineActivated| { &mut m.local_peer_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusNotifyEngineActivated>(
                    "ConsensusNotifyEngineActivated",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusNotifyEngineActivated {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusNotifyEngineActivated> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusNotifyEngineActivated,
        };
        unsafe {
            instance.get(ConsensusNotifyEngineActivated::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusNotifyEngineActivated {
    fn clear(&mut self) {
        self.chain_head.clear();
        self.peers.clear();
        self.local_peer_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyEngineActivated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyEngineActivated {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyEngineDeactivated {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyEngineDeactivated {
    fn default() -> &'a ConsensusNotifyEngineDeactivated {
        <ConsensusNotifyEngineDeactivated as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyEngineDeactivated {
    pub fn new() -> ConsensusNotifyEngineDeactivated {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ConsensusNotifyEngineDeactivated {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyEngineDeactivated {
        ConsensusNotifyEngineDeactivated::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusNotifyEngineDeactivated>(
                    "ConsensusNotifyEngineDeactivated",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusNotifyEngineDeactivated {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusNotifyEngineDeactivated> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusNotifyEngineDeactivated,
        };
        unsafe {
            instance.get(ConsensusNotifyEngineDeactivated::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusNotifyEngineDeactivated {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyEngineDeactivated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyEngineDeactivated {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusNotifyAck {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusNotifyAck {
    fn default() -> &'a ConsensusNotifyAck {
        <ConsensusNotifyAck as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusNotifyAck {
    pub fn new() -> ConsensusNotifyAck {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ConsensusNotifyAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusNotifyAck {
        ConsensusNotifyAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusNotifyAck>(
                    "ConsensusNotifyAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusNotifyAck {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusNotifyAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusNotifyAck,
        };
        unsafe {
            instance.get(ConsensusNotifyAck::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusNotifyAck {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusNotifyAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusNotifyAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fconsensus.proto\x12\x05proto\"\xba\x01\n\x0eConsensusBlock\x12\x19\
    \n\x08block_id\x18\x01\x20\x01(\x0cR\x07blockId\x12\x1f\n\x0bprevious_id\
    \x18\x02\x20\x01(\x0cR\npreviousId\x12\x1b\n\tsigner_id\x18\x03\x20\x01(\
    \x0cR\x08signerId\x12\x1b\n\tblock_num\x18\x04\x20\x01(\x04R\x08blockNum\
    \x12\x18\n\x07payload\x18\x05\x20\x01(\x0cR\x07payload\x12\x18\n\x07summ\
    ary\x18\x06\x20\x01(\x0cR\x07summary\",\n\x11ConsensusPeerInfo\x12\x17\n\
    \x07peer_id\x18\x01\x20\x01(\x0cR\x06peerId\"F\n\x17ConsensusNotifyBlock\
    New\x12+\n\x05block\x18\x01\x20\x01(\x0b2\x15.proto.ConsensusBlockR\x05b\
    lock\"6\n\x19ConsensusNotifyBlockValid\x12\x19\n\x08block_id\x18\x01\x20\
    \x01(\x0cR\x07blockId\"8\n\x1bConsensusNotifyBlockInvalid\x12\x19\n\x08b\
    lock_id\x18\x01\x20\x01(\x0cR\x07blockId\"7\n\x1aConsensusNotifyBlockCom\
    mit\x12\x19\n\x08block_id\x18\x01\x20\x01(\x0cR\x07blockId\"\xc8\x01\n\
    \x1eConsensusNotifyEngineActivated\x124\n\nchain_head\x18\x01\x20\x01(\
    \x0b2\x15.proto.ConsensusBlockR\tchainHead\x12.\n\x05peers\x18\x02\x20\
    \x03(\x0b2\x18.proto.ConsensusPeerInfoR\x05peers\x12@\n\x0flocal_peer_in\
    fo\x18\x03\x20\x01(\x0b2\x18.proto.ConsensusPeerInfoR\rlocalPeerInfo\"\"\
    \n\x20ConsensusNotifyEngineDeactivated\"\x14\n\x12ConsensusNotifyAckb\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}

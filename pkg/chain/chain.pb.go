// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chain.proto

package proto

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	block "github.com/pingcap/kvproto/pkg/block"

	common "github.com/pingcap/kvproto/pkg/common"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResponseHash struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	IsFound              bool     `protobuf:"varint,2,opt,name=is_found,json=isFound,proto3" json:"is_found,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseHash) Reset()         { *m = ResponseHash{} }
func (m *ResponseHash) String() string { return proto.CompactTextString(m) }
func (*ResponseHash) ProtoMessage()    {}
func (*ResponseHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_chain_1c9251262e27acfb, []int{0}
}
func (m *ResponseHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseHash.Merge(dst, src)
}
func (m *ResponseHash) XXX_Size() int {
	return m.Size()
}
func (m *ResponseHash) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseHash.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseHash proto.InternalMessageInfo

func (m *ResponseHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ResponseHash) GetIsFound() bool {
	if m != nil {
		return m.IsFound
	}
	return false
}

func init() {
	proto.RegisterType((*ResponseHash)(nil), "proto.ResponseHash")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chain service

type ChainClient interface {
	FindOrStore(ctx context.Context, in *common.Proposal, opts ...grpc.CallOption) (*ResponseHash, error)
	FindLastBlock(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*block.Block, error)
	ExecutorQuery(ctx context.Context, in *common.Proposal, opts ...grpc.CallOption) (*common.ProposalResponse, error)
}

type chainClient struct {
	cc *grpc.ClientConn
}

func NewChainClient(cc *grpc.ClientConn) ChainClient {
	return &chainClient{cc}
}

func (c *chainClient) FindOrStore(ctx context.Context, in *common.Proposal, opts ...grpc.CallOption) (*ResponseHash, error) {
	out := new(ResponseHash)
	err := c.cc.Invoke(ctx, "/proto.Chain/FindOrStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) FindLastBlock(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*block.Block, error) {
	out := new(block.Block)
	err := c.cc.Invoke(ctx, "/proto.Chain/FindLastBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) ExecutorQuery(ctx context.Context, in *common.Proposal, opts ...grpc.CallOption) (*common.ProposalResponse, error) {
	out := new(common.ProposalResponse)
	err := c.cc.Invoke(ctx, "/proto.Chain/ExecutorQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chain service

type ChainServer interface {
	FindOrStore(context.Context, *common.Proposal) (*ResponseHash, error)
	FindLastBlock(context.Context, *common.Empty) (*block.Block, error)
	ExecutorQuery(context.Context, *common.Proposal) (*common.ProposalResponse, error)
}

func RegisterChainServer(s *grpc.Server, srv ChainServer) {
	s.RegisterService(&_Chain_serviceDesc, srv)
}

func _Chain_FindOrStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).FindOrStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Chain/FindOrStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).FindOrStore(ctx, req.(*common.Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain_FindLastBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).FindLastBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Chain/FindLastBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).FindLastBlock(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain_ExecutorQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).ExecutorQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Chain/ExecutorQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).ExecutorQuery(ctx, req.(*common.Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Chain",
	HandlerType: (*ChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOrStore",
			Handler:    _Chain_FindOrStore_Handler,
		},
		{
			MethodName: "FindLastBlock",
			Handler:    _Chain_FindLastBlock_Handler,
		},
		{
			MethodName: "ExecutorQuery",
			Handler:    _Chain_ExecutorQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}

func (m *ResponseHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChain(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.IsFound {
		dAtA[i] = 0x10
		i++
		if m.IsFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintChain(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResponseHash) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	if m.IsFound {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChain(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChain(x uint64) (n int) {
	return sovChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResponseHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChain   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("chain.proto", fileDescriptor_chain_1c9251262e27acfb) }

var fileDescriptor_chain_1c9251262e27acfb = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0x48, 0xcc,
	0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xdc, 0x49, 0x39, 0xf9,
	0xc9, 0xd9, 0x10, 0x31, 0x29, 0x9e, 0xe4, 0xfc, 0xdc, 0xdc, 0x7c, 0xa8, 0x0a, 0x25, 0x5b, 0x2e,
	0x9e, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x8f, 0xc4, 0xe2, 0x0c, 0x21, 0x21, 0x2e,
	0x96, 0x8c, 0xc4, 0xe2, 0x0c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x30, 0x5b, 0x48, 0x92,
	0x8b, 0x23, 0xb3, 0x38, 0x3e, 0x2d, 0xbf, 0x34, 0x2f, 0x45, 0x82, 0x49, 0x81, 0x51, 0x83, 0x23,
	0x88, 0x3d, 0xb3, 0xd8, 0x0d, 0xc4, 0x35, 0x5a, 0xc5, 0xc8, 0xc5, 0xea, 0x0c, 0xb2, 0x50, 0xc8,
	0x94, 0x8b, 0xdb, 0x2d, 0x33, 0x2f, 0xc5, 0xbf, 0x28, 0xb8, 0x24, 0xbf, 0x28, 0x55, 0x88, 0x1f,
	0x62, 0xbe, 0x5e, 0x40, 0x51, 0x7e, 0x41, 0x7e, 0x71, 0x62, 0x8e, 0x94, 0x30, 0x54, 0x00, 0xd9,
	0x36, 0x25, 0x06, 0x21, 0x5d, 0x2e, 0x5e, 0x90, 0x36, 0x9f, 0xc4, 0xe2, 0x12, 0x27, 0x90, 0x23,
	0x85, 0x78, 0xa0, 0xea, 0x5c, 0x73, 0x0b, 0x4a, 0x2a, 0xa5, 0x60, 0x3c, 0xb0, 0x9c, 0x12, 0x83,
	0x90, 0x35, 0x17, 0xaf, 0x6b, 0x45, 0x6a, 0x72, 0x69, 0x49, 0x7e, 0x51, 0x60, 0x69, 0x6a, 0x51,
	0x25, 0xa6, 0x3d, 0xe2, 0x68, 0x02, 0x30, 0xfb, 0x94, 0x18, 0x9c, 0x04, 0x4e, 0x3c, 0x92, 0x63,
	0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0,
	0x6a, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xdb, 0x52, 0xda, 0x35, 0x01, 0x00, 0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package proto

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message_MessageType int32

const (
	Message_DEFAULT Message_MessageType = 0
	// Consensus notification messages
	Message_CONSENSUS_NOTIFY_PEER_CONNECTED    Message_MessageType = 900
	Message_CONSENSUS_NOTIFY_PEER_DISCONNECTED Message_MessageType = 901
	Message_CONSENSUS_NOTIFY_PEER_MESSAGE      Message_MessageType = 902
	Message_CONSENSUS_NOTIFY_BLOCK_NEW         Message_MessageType = 903
	Message_CONSENSUS_NOTIFY_BLOCK_VALID       Message_MessageType = 904
	Message_CONSENSUS_NOTIFY_BLOCK_INVALID     Message_MessageType = 905
	Message_CONSENSUS_NOTIFY_BLOCK_COMMIT      Message_MessageType = 906
)

var Message_MessageType_name = map[int32]string{
	0:   "DEFAULT",
	900: "CONSENSUS_NOTIFY_PEER_CONNECTED",
	901: "CONSENSUS_NOTIFY_PEER_DISCONNECTED",
	902: "CONSENSUS_NOTIFY_PEER_MESSAGE",
	903: "CONSENSUS_NOTIFY_BLOCK_NEW",
	904: "CONSENSUS_NOTIFY_BLOCK_VALID",
	905: "CONSENSUS_NOTIFY_BLOCK_INVALID",
	906: "CONSENSUS_NOTIFY_BLOCK_COMMIT",
}
var Message_MessageType_value = map[string]int32{
	"DEFAULT":                            0,
	"CONSENSUS_NOTIFY_PEER_CONNECTED":    900,
	"CONSENSUS_NOTIFY_PEER_DISCONNECTED": 901,
	"CONSENSUS_NOTIFY_PEER_MESSAGE":      902,
	"CONSENSUS_NOTIFY_BLOCK_NEW":         903,
	"CONSENSUS_NOTIFY_BLOCK_VALID":       904,
	"CONSENSUS_NOTIFY_BLOCK_INVALID":     905,
	"CONSENSUS_NOTIFY_BLOCK_COMMIT":      906,
}

func (x Message_MessageType) String() string {
	return proto.EnumName(Message_MessageType_name, int32(x))
}
func (Message_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_318796adccf5fe93, []int{0, 0}
}

type Message struct {
	MessageType Message_MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=proto.Message_MessageType" json:"message_type,omitempty"`
	// The identifier used to correlate response messages to their related
	// request messages.  correlation_id should be set to a random string
	// for messages which are not responses to previously sent messages.  For
	// response messages, correlation_id should be set to the same string as
	// contained in the request message.
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// The content of the message, defined by message_type.  In many
	// cases, this data has been serialized with Protocol Buffers
	Content              []byte   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_318796adccf5fe93, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessageType() Message_MessageType {
	if m != nil {
		return m.MessageType
	}
	return Message_DEFAULT
}

func (m *Message) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *Message) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "proto.Message")
	proto.RegisterEnum("proto.Message_MessageType", Message_MessageType_name, Message_MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Component service

type ComponentClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Component_RegisterClient, error)
}

type componentClient struct {
	cc *grpc.ClientConn
}

func NewComponentClient(cc *grpc.ClientConn) ComponentClient {
	return &componentClient{cc}
}

func (c *componentClient) Register(ctx context.Context, opts ...grpc.CallOption) (Component_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Component_serviceDesc.Streams[0], "/proto.Component/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &componentRegisterClient{stream}
	return x, nil
}

type Component_RegisterClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type componentRegisterClient struct {
	grpc.ClientStream
}

func (x *componentRegisterClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *componentRegisterClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Component service

type ComponentServer interface {
	Register(Component_RegisterServer) error
}

func RegisterComponentServer(s *grpc.Server, srv ComponentServer) {
	s.RegisterService(&_Component_serviceDesc, srv)
}

func _Component_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComponentServer).Register(&componentRegisterServer{stream})
}

type Component_RegisterServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type componentRegisterServer struct {
	grpc.ServerStream
}

func (x *componentRegisterServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *componentRegisterServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Component_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Component",
	HandlerType: (*ComponentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Component_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.MessageType))
	}
	if len(m.CorrelationId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CorrelationId)))
		i += copy(dAtA[i:], m.CorrelationId)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.MessageType != 0 {
		n += 1 + sovMessage(uint64(m.MessageType))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= (Message_MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("message.proto", fileDescriptor_message_318796adccf5fe93) }

var fileDescriptor_message_318796adccf5fe93 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd1, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x06, 0x60, 0x06, 0xf2, 0x7d, 0x23, 0x87, 0x9f, 0x34, 0xb3, 0x6a, 0x88, 0x16, 0xac, 0x1a,
	0xbb, 0x22, 0x04, 0xd7, 0x2c, 0xa0, 0x1d, 0x4c, 0x23, 0x6d, 0x4d, 0x5b, 0x34, 0xae, 0x1a, 0x84,
	0x09, 0x21, 0x91, 0x4e, 0x53, 0x66, 0xc3, 0xde, 0xff, 0x2b, 0x30, 0x5e, 0x80, 0xd7, 0xe2, 0xd2,
	0x4b, 0x30, 0x78, 0x23, 0x26, 0x14, 0x02, 0x2a, 0xac, 0xde, 0xbc, 0x33, 0xcf, 0x4c, 0x4e, 0x72,
	0xa0, 0x30, 0x66, 0x93, 0x49, 0x6f, 0xc8, 0xaa, 0x51, 0xcc, 0x05, 0x27, 0xff, 0xe6, 0xa1, 0xbe,
	0x65, 0x00, 0x5b, 0xc9, 0x05, 0x69, 0x40, 0x7e, 0x61, 0x02, 0x31, 0x8d, 0x98, 0x8c, 0x2a, 0x48,
	0x2b, 0xd6, 0x4b, 0xc9, 0x83, 0xea, 0x42, 0x2d, 0xd3, 0x9f, 0x46, 0xcc, 0xcd, 0x8d, 0x57, 0x85,
	0x1c, 0x41, 0xb1, 0xcf, 0xe3, 0x98, 0xdd, 0xf4, 0xc4, 0x88, 0x87, 0xc1, 0x68, 0x20, 0xa7, 0x2b,
	0x48, 0xcb, 0xba, 0x85, 0xb5, 0x53, 0x73, 0x40, 0x64, 0xc0, 0x7d, 0x1e, 0x0a, 0x16, 0x0a, 0x39,
	0x53, 0x41, 0x5a, 0xde, 0x5d, 0x56, 0xf5, 0x35, 0x0d, 0xb9, 0xb5, 0xdf, 0x49, 0x0e, 0xb0, 0x41,
	0xdb, 0xcd, 0x6e, 0xc7, 0x97, 0x52, 0xe4, 0x10, 0xca, 0xba, 0x63, 0x7b, 0xd4, 0xf6, 0xba, 0x5e,
	0x60, 0x3b, 0xbe, 0xd9, 0xbe, 0x0a, 0xce, 0x29, 0x75, 0x03, 0xdd, 0xb1, 0x6d, 0xaa, 0xfb, 0xd4,
	0x90, 0x6e, 0x31, 0x39, 0x06, 0x75, 0xb3, 0x32, 0x4c, 0x6f, 0x05, 0xef, 0x30, 0x51, 0x61, 0x6f,
	0x33, 0xb4, 0xa8, 0xe7, 0x35, 0x4f, 0xa9, 0x74, 0x8f, 0x49, 0x19, 0x4a, 0x7f, 0x4c, 0xab, 0xe3,
	0xe8, 0x67, 0x81, 0x4d, 0x2f, 0xa5, 0x07, 0x4c, 0xf6, 0x61, 0x77, 0x0b, 0xb8, 0x68, 0x76, 0x4c,
	0x43, 0x7a, 0xc4, 0xe4, 0x00, 0x94, 0x2d, 0xc4, 0xb4, 0x13, 0xf4, 0xb4, 0x79, 0x98, 0x04, 0xe9,
	0x8e, 0x65, 0x99, 0xbe, 0xf4, 0x8c, 0xeb, 0x0d, 0xc8, 0xea, 0x7c, 0x1c, 0xf1, 0x90, 0x85, 0x82,
	0xd4, 0x60, 0xc7, 0x65, 0xc3, 0xd1, 0x44, 0xb0, 0x98, 0x14, 0x7f, 0xee, 0xa7, 0xf4, 0xab, 0xab,
	0x29, 0x0d, 0xd5, 0x50, 0x4b, 0x7a, 0x9f, 0x29, 0xe8, 0x63, 0xa6, 0xa0, 0xcf, 0x99, 0x82, 0x5e,
	0xbe, 0x94, 0xd4, 0xf5, 0xff, 0x39, 0x3b, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x6b, 0x6a,
	0xad, 0x18, 0x02, 0x00, 0x00,
}
